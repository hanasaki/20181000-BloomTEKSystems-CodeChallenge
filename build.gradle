/**
 *
 * Copyright (C) 2018-*, Frederick Bloom. All rights reserved.
 *
 * Licensed: "As-Is" WITHOUT WARRANTIES ANY KIND,
 * either express or implied.  Permission given to reuse source/object code
 * so long as credit provided to original author in copied/derived source and
 * all visible license/credits to the consumer of this code.
 *
 */
/**
Note: compile, runtime, testCompile, and testRuntime configurations.
introduced by the Java plugin
have been deprecated since Gradle 4.10 (Aug 27, 2018)
and were finally removed in Gradle 7.0 (Apr 9, 2021).

Should be replaced by:
implementation, runtimeOnly, testImplementation, and testRuntimeOnly.

*/

import org.gradle.api.artifacts.*

buildscript {
    repositories {
        mavenLocal()
        mavenCentral();
        // You may define additional repositories, or even remove "mavenCentral()".
        // Read more about repositories here:
        //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:repositories

        maven { url "https://plugins.gradle.org/m2" }
    }
    dependencies {
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
        classpath 'com.fizzpod:gradle-sweeney-plugin:4.2.+'
    }
}

apply plugin: 'base' // To add "clean" task to the root project.
apply plugin: 'java'
apply plugin: "jacoco"
apply plugin: 'maven-publish'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.fizzpod.sweeney'
//apply plugin: 'org.junit.platform.gradle.plugin'

//bootJar {
//    baseName = '...'
//    version =  '0.1.2'
//}
sweeney {
    // tests whether gradle is 2.0 or above
    enforce 'jdk:[11,17.1):Requires JDK 11.*'
    enforce 'gradle:[6.4,7.5]'
}

task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
    title = 'All modules'
    destinationDir = new File(project.buildDir, 'merged-javadoc')

    // Note: The closures below are executed lazily.
    source {
        subprojects*.sourceSets*.main*.allSource
    }
    classpath.from {
        objects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
    }
}

//===========
ext {
    //    Properties props = new Properties()
    //    props.load(new FileInputStream("$project.rootDir/profile/"+"$environment"+".properties"))
    //    props.each { prop ->
    //        project.ext.set(prop.key, prop.value)
    //    }

    versionFile = new File(project.rootDir, 'version.properties')
    calculateVersionName = {
        def versionProps = readVersion()
        return "${versionProps['major']}.${versionProps['minor']}.${versionProps['patch']}-${versionProps['build']}"
    }
}

version=ext.calculateVersionName()
project.version=ext.calculateVersionName()

version = rootProject.version
group = rootProject.group
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
//    sourceCompatibility = java.src.version
//    targetCompatibility = java.target.version

task allDeps(type: DependencyReportTask) {}
subprojects {
    task allDeps(type: DependencyReportTask) {}
    apply from: rootProject.file('common.gradle')
}
allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    group = 'myGroup'
    version = '0.1-SNAPSHOT'
}
allprojects {
    project.version = rootProject.version

    //
    dependencies {
        implementation "args4j:args4j:2.3+"
        //
        implementation "org.apache.commons:commons-lang3:3.8.+"
        implementation "commons-beanutils:commons-beanutils:1.9.+"
        implementation "org.slf4j:slf4j-api:1.7.+"
        //        implementation("org.springframework.boot:spring-boot-starter-web")
        implementation("org.springframework.boot:spring-boot-starter")
        implementation("org.springframework:spring-web")
        //
        implementation("com.fasterxml.jackson.core:jackson-databind")
        //
        implementation("ch.qos.logback:logback-classic:1.2.3")

        //
        implementation('org.assertj:assertj-core:3.11.1')
        //
        testImplementation('org.junit.jupiter:junit-jupiter-api:' + junitVersion)
        testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:' +junitVersion)
        testImplementation("org.springframework:spring-test")
        testImplementation("org.springframework.boot:spring-boot-test:2.0.5.RELEASE")


        // TODO: Add dependencies here ...
        // You can read more about how to add dependency here:
        //   http://www.gradle.org/docs/current/userguide/dependency_management.html#sec:how_to_declare_your_dependencies

    }
}

allprojects {
    //    version = rootProject.version
    //    group = rootProject.group
    //    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    sourceCompatibility = "${javaSrcVersion}"
    targetCompatibility = "${javaTargetVersion}"
}

apply from: 'common.gradle' // comes aftter all projects that sets source/target Compatibility

Properties readVersion() {
    def version = new Properties()
    def stream
    try {
        stream = new FileInputStream(versionFile)
        version.load(stream)
    } catch (FileNotFoundException ignore) {
        println ignore.toString()
    } finally {
        if (stream != null) stream.close()
    }
    // safety defaults in case file is missing
    if(!version['major']) version['major'] = "1"
    if(!version['minor']) version['minor'] = "0"
    if(!version['patch']) version['minor'] = "0"
    if(!version['build']) version['build'] = "0"
    return version
}

void incrementVersionNumber() {
    def version = readVersion()

    // careful with the types, culprits: "9"++ = ":", "9" + 1 = "91"
    def build = version['build'] as int
    build++
    version['build'] = build.toString()
    def stream = new FileOutputStream(versionFile)
    try {
        version.store(stream, null)
    } finally {
        stream.close()
    }
}

gradle.taskGraph.whenReady {taskGraph ->
    //    if (taskGraph.hasTask(assembleDebug)) {  /* when run debug task */
    //        incrementVersionNumber()
    //    } else if (taskGraph.hasTask(assembleRelease)) { /* when run release task */
    //        incrementVersionNumber()
    //    } else
    //    if (!taskGraph.hasTask(release)) {
    //        //        rootProject.version='1.1.5'
    //        version='-SNAPSHOT'
    //    }
    if (taskGraph.hasTask(assemble)) {
        incrementVersionNumber()
    }
}


